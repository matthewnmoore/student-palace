Student Palace – Handover List (rolled back to bulk editing pages stable point) 06/09/2025
===========================================================================================




07/09/2025

Student Palace – Development Handover Brief
	1.	Context

	•	Platform: Student Palace is a student housing platform for UK landlords and students.
	•	Core entities: Houses (properties) and Rooms (units within houses).
	•	Media: Each house/room can have up to 5 uploaded photos (watermarked, trimmed at upload).
	•	Frontend: Jinja2 templates with Flask; deployed on Render.

	2.	Work on Property (House) Pages

	•	House template (property_public.html) is the reference standard and always worked.
	•	Uses url_for(‘static’, filename=…) to fetch images.
	•	Displays first photo as hero, plus up to 4 thumbnails (max 5).
	•	Highlights summarise features (bills, bathrooms, gender, etc).
	•	Facilities grid with icons (Wi-Fi, Dishwasher, etc).
	•	Key details card with EPC, letting type, and room count.
	•	Room list grid links to individual room pages.
	•	House images always displayed correctly.

	3.	Work on Room Pages

	•	Room template (room_public.html) adapted from house template.
	•	Same hero + thumbnails structure.
	•	Highlights tailored to the individual room (price, ensuite/shared, bed size, couples/disabled flags).
	•	About section, Key details, and Listed by landlord included.
	•	Problem: Room images consistently show as blue question marks, while house images are fine.

	4.	Debugging the Room Image Issue

	•	Path mismatch suspected: house images stored in uploads/houses/, room images may be in uploads/rooms/.
	•	Mixing of url_for(‘static’, …) and media_url caused inconsistencies.
	•	Template errors found: unbalanced if/else blocks caused Jinja2 crashes.
	•	Duplicate {% extends “base.html” %} statements also caused crashes.

	5.	Stability Baseline

	•	Last working copy of room template displayed without crashing.
	•	Images still broken, but logic and highlights worked.
	•	House template remained stable and fully working.

	6.	Lessons Learned

	•	Keep house and room templates aligned for image handling.
	•	Ensure all {% if %} / {% else %} / {% endif %} blocks are balanced.
	•	Never paste in a second {% extends “base.html” %}.
	•	Test in small steps to catch template syntax errors quickly.
	•	Deploy logs confirm only template syntax errors, not database or Flask issues.

	7.	Next Steps

	•	Unify image handling: make the room template process images the same as the house template.
	•	Verify room image paths in the database (uploads/rooms/ vs uploads/houses/).
	•	Testing: validate locally before deploy. Keep stable backup templates (baseline-stable-2025-08-31).
	•	Possible fix: either switch room template to use media_url, or standardise DB image paths to /static/uploads/… so both can use url_for(‘static’, …).

	8.	Key Files

	•	property_public.html = working house template (reference).
	•	room_public.html = unstable template (images broken, sometimes crashes).
	•	DB_Schema_& Rules_READ_ME.txt = master rules file (must always stay in repo).
	•	/static/uploads/houses/student_palace.db = persistent SQLite database.

Summary: Houses work fine. Rooms crash if template syntax isn’t balanced, and photos don’t render because of inconsistent path handling. The main next step is to make room image handling identical to houses, while checking that the database paths match.






06/06/2025

Student Palace – Public Property Page Handover

1. Page purpose
	•	Displays a single property (/p/<house_id>).
	•	Shows landlord verification, title/address, images, highlights, facilities, bills included, description, key details, rooms, and landlord info.

⸻

2. Data sources

All data comes from the database and is passed to the template by public.py:
	•	House (houses table):
	•	id, title, city, address
	•	bedrooms_total
	•	shared_bathrooms
	•	letting_type (whole or share)
	•	gender_preference (Male, Female, Mixed)
	•	epc_rating
	•	listing_type (owner or agent)
	•	bills_option (values: yes, no, some)
	•	bills_util_gas, bills_util_electric, bills_util_water, bills_util_broadband, bills_util_tv
	•	Amenities flags: cctv, off_street_parking, local_parking, bike_storage, washing_machine, tumble_dryer, dishwasher, cooker, microwave, coffee_maker, central_heating, air_conditioning, vacuum, wifi, wired_internet, common_area_tv, garden, roof_terrace, games_room, cinema_room
	•	Rooms (rooms table):
	•	id, name, is_let
	•	price_pcm
	•	bed_size, room_size
	•	ensuite
	•	description
	•	Images (house_images table):
	•	file_path
	•	is_primary, sort_order
	•	Landlord (landlord_profiles + landlords tables):
	•	display_name
	•	public_slug
	•	is_verified
	•	email

⸻

3. What’s already implemented
	•	✅ Verified banner: Shows ✅ or ❌ with text.
	•	✅ Owner/agent badge: Now placed on the verified banner (not in the title box).
	•	✅ Title card: Shows property title, short address, EPC label, bills badge, and landlord name + logo.
	•	✅ Images: Hero image + up to 5 thumbnails.
	•	✅ Facilities grid: Amenities from houses fields.
	•	✅ Bills included card: Icons for utilities if bills_option is yes or some.
	•	✅ Description card: house.description.
	•	✅ Key details card: Bedrooms, letting type, gender preference, shared bathrooms.
	•	✅ Rooms grid: Each room’s name, status (Let/Available), bed size, size, price, description.
	•	✅ Landlord card: Landlord name (linked if public_slug), verified tick, email.

⸻

4. Highlights box (status)

Currently displays:
	•	Bills summary (all/some/none).
	•	Bedrooms total.
	•	Ensuites total.
	•	Available rooms count.

⸻

5. Outstanding edits (not finished yet)

Here’s the exact logic still to apply to the Highlights box:

a) Gender
	•	If house.gender_preference == 'Male' → show: “This house identifies as male”
	•	If house.gender_preference == 'Female' → show: “This house identifies as female”
	•	If house.gender_preference == 'Mixed' → show nothing.

b) Room price
	•	If all rooms have the same price_pcm → show: “Rooms £”
	•	If prices vary → show: “Rooms from £<cheapest_price>”

c) Letting type availability wording
	•	If house.letting_type == 'whole':
→ “Suitable for a group of {{ house.bedrooms_total }}”
	•	If house.letting_type == 'share' and all rooms available (rooms_available == bedrooms_total):
→ “Available for a group of {{ house.bedrooms_total }}”
→ “Also suitable as individual rooms”
	•	If house.letting_type == 'share' and partial rooms available (rooms_available < bedrooms_total):
→ “Suitable as individual rooms”

d) Shared bathrooms
	•	Already in Key details, but should also be added to Highlights if > 0.

⸻

6. Known issues
	•	❌ In some past versions the template broke (missing {% endblock %}) — the current working copy does have the endblock at the bottom, so keep that as your rollback-safe base.
	•	❌ Layout “exploding” came from misplaced or half-written ul/li inside Highlights — fixed by ensuring every if/elif/else ends cleanly before <ul> is closed.

⸻

7. Next steps to finish this page
	1.	Start from your current working copy (the one you pasted above with endblock).
	2.	Add the 3 pending highlight logic rules (gender, room price, letting type).
	3.	Carefully insert them inside the Highlights <ul>, making sure each {% if %} / {% endif %} matches.
	4.	Test with:
	•	A whole house listing.
	•	A house share with all rooms available.
	•	A house share with partial rooms available.
	•	Gender set to Male, Female, and Mixed.
	•	Rooms with equal price vs. mixed prices.






Student Palace – Handover Sheet

Core stack:
	•	Python 3 (Flask web app).
	•	SQLite database (file at /opt/render/project/src/static/uploads/houses/student_palace.db).
	•	Jinja2 templates.
	•	Static assets in /static/ (css, img, uploads etc.).

⸻

Blueprints
	•	admin: Admin dashboard, db-report, landlords, houses, images.
	•	auth: Login/logout for landlords and admin.
	•	public: Public property/student pages.
	•	landlord: Main landlord features (houses, rooms, photos, floorplans, EPCs, bulk editing, profile, portfolio, delete).

⸻

Landlord blueprint routes (confirmed):
	•	/landlord/houses → list landlord’s houses (houses_list.html template).
	•	/landlord/houses/new → add new house (house_form.html).
	•	/landlord/houses//edit → edit a house (house_form.html).
	•	/landlord/houses//delete → delete a house, its rooms, all photos and documents (backend in landlord/delete.py).
	•	/landlord/houses//rooms → list rooms for a house (rooms_list.html).
	•	/landlord/houses//rooms/new → add new room (room_form.html).
	•	/landlord/houses//rooms//edit → edit room (room_form.html).
	•	/landlord/houses//rooms//delete → delete a single room and its images (backend in landlord/delete.py).
	•	/landlord/houses//photos → manage house photos.
	•	/landlord/houses//rooms//photos → manage room photos.
	•	Floorplans, EPC uploads, bulk edits, portfolio also handled in landlord.

⸻

Delete functionality (critical parts done):
	1.	House delete (landlord/delete.py)
	•	Deletes house row, its rooms, house images, room images, floorplans, EPC/documents.
	•	Also deletes associated files from /static/uploads/... after DB cleanup.
	•	Triggered from the “Delete” button on houses_list.html.
	2.	Room delete (landlord/delete.py)
	•	Deletes one room and its associated room_images.
	•	Removes image files from static storage.
	•	Triggered from the “Delete” button on rooms_list.html and on room_form.html (edit mode only).

⸻

Templates with delete buttons:
	•	houses_list.html → has delete house button.
	•	rooms_list.html → has delete room button.
	•	room_form.html → shows delete room button in edit mode only.

All delete buttons use <form method="post"> with a confirmation prompt.

⸻

Auto calculations:
	•	Room edit form (room_form.html) includes Price per week auto-calculation:
	•	Listens for changes on price per month input.
	•	Updates readonly PPW field live using (pcm * 12) / 52.
	•	Room availability logic:
	•	If “Currently let” checked, sets let_until = 30 June next year and available_from = following day.
	•	If unchecked, sets available_from = today and hides let_until.

⸻

Admin
	•	/admin/db-report shows schema and live row counts for all tables (used for verifying delete worked).
	•	Admin backup page allows download of full DB snapshot.

⸻

Database tables relevant to deletes:
	•	houses: master house info.
	•	rooms: linked by house_id.
	•	house_images: linked by house_id.
	•	room_images: linked by room_id (rooms → house).
	•	house_floorplans: linked by house_id.
	•	house_documents: linked by house_id (EPCs and PDFs).
	•	Other tables: landlords, landlord_profiles, students, favourites, accreditation tables etc. not touched by deletes.

⸻

Current working state (last tested):
	•	House delete → removes house, rooms, all images (house and room), floorplans, documents, and underlying files.
	•	Room delete → removes room and its room_images + file cleanup.
	•	Counts in /admin/db-report confirmed house/room/image records removed correctly.
	•	PDFs in house_documents are also deleted.
	•	Verified that templates render correctly after fixes (except when wrong url_for parameter names were used).

⸻

Known issues fixed:
	•	houses_list.html template name mismatch corrected (was houses_list.html, not house_list.html).
	•	url_for parameter mismatch fixed: must use hid and rid consistently, not house_id and room_id.

⸻

Next step not yet implemented (but planned):
	•	Admin-level landlord delete → would remove landlord, all their houses, rooms, photos, documents, and files.
	•	Button placement would be in Admin landlord detail/list page.
	•	Backend logic would need to:
	1.	Gather all landlord’s house IDs.
	2.	Reuse house_delete logic for each.
	3.	Finally remove landlord and landlord_profile rows.



Student Palace – Handover Sheet (with Developer Actions)

Core stack:
	•	Python 3 (Flask web app).
	•	SQLite database at /opt/render/project/src/static/uploads/houses/student_palace.db.
	•	Jinja2 templates for views.
	•	Static files in /static/ (CSS, JS, images, uploads).

⸻

Blueprints
	•	admin → site administration, backups, db report.
	•	auth → login/logout for landlords/admin.
	•	public → student-facing property/room pages.
	•	landlord → landlord dashboard, houses, rooms, photos, floorplans, EPCs, bulk, portfolio, profile, delete.

⸻

Landlord Routes
	•	/landlord/houses → list houses.
	•	/landlord/houses/new → add house.
	•	/landlord/houses/<hid>/edit → edit house.
	•	/landlord/houses/<hid>/delete → delete house (+ rooms, images, floorplans, docs).
	•	/landlord/houses/<hid>/rooms → list rooms.
	•	/landlord/houses/<hid>/rooms/new → add room.
	•	/landlord/houses/<hid>/rooms/<rid>/edit → edit room.
	•	/landlord/houses/<hid>/rooms/<rid>/delete → delete single room + room images.
	•	/landlord/houses/<hid>/photos → manage house photos.
	•	/landlord/houses/<hid>/rooms/<rid>/photos → manage room photos.
	•	Floorplans and EPC/documents also have upload and manage routes.

⸻

Delete Functionality

1. House delete (landlord/delete.py):
	•	Collects all file paths (house images, room images, floorplans, documents).
	•	Deletes DB rows: room_images, house_images, house_floorplans, house_documents, rooms, then the house itself.
	•	Deletes files from disk.
	•	Triggered by delete button in houses_list.html.

2. Room delete (landlord/delete.py):
	•	Collects all file paths for that room’s images.
	•	Deletes DB rows: room_images, then the room itself.
	•	Deletes image files from disk.
	•	Triggered by delete button in rooms_list.html and room_form.html.

⸻

Templates with Delete Buttons
	•	houses_list.html → delete house button (landlord.house_delete).
	•	rooms_list.html → delete room button (landlord.room_delete).
	•	room_form.html → delete room button visible only in edit mode.

All wrapped in <form method="post"> with JS confirm(...).

⸻

Auto Calculations (Room Edit Page)
	•	Price per week is auto-calculated live from price per month.
	•	Availability fields auto-adjust:
	•	If “Currently let” ticked → set let_until = 30 June next year, available_from = day after.
	•	If unticked → set available_from = today, let_until = two days before today (hidden).

⸻

Admin
	•	/admin/db-report → live DB schema and row counts. Used to confirm deletes worked.
	•	/admin/backup → download database backup snapshot.

⸻

Database Tables (relevant to delete)
	•	houses → parent of rooms, images, docs.
	•	rooms → child of houses.
	•	house_images → images per house.
	•	room_images → images per room.
	•	house_floorplans → floorplans per house.
	•	house_documents → PDFs/docs per house (e.g., EPC).
	•	landlords and landlord_profiles → for owner info.
	•	Others: students, favourites, accreditation tables (untouched by current delete).

⸻

Current Working State
	•	House delete: ✅ removes house + all children + files.
	•	Room delete: ✅ removes one room + its images + files.
	•	Templates: ✅ render correctly (parameter names fixed to hid/rid).
	•	DB report: ✅ shows counts updating correctly.
	•	PDFs in house_documents are deleted along with house.

⸻

Developer Actions (Step-by-Step)

House Delete:
	1.	Backend: landlord/delete.py → delete_house (already implemented).
	2.	Template: houses_list.html form posts to url_for('landlord.house_delete', hid=h.id).

Room Delete:
	1.	Backend: landlord/delete.py → delete_room (already implemented).
	2.	Template:
	•	rooms_list.html form posts to url_for('landlord.room_delete', hid=house.id, rid=r.id).
	•	room_form.html form posts to url_for('landlord.room_delete', hid=house.id, rid=room.id) and only shows in edit mode.

Testing Deletes:
	•	Add house with photos, rooms, and room photos.
	•	Delete at house level → check house, rooms, photos, floorplans, EPCs gone.
	•	Delete at room level → check room row + images gone, other rooms unaffected.
	•	Verify with /admin/db-report.
	•	Check uploads folder to confirm files removed.

Next (not yet done):
	•	Admin-level landlord delete:
	•	Button on admin landlord page.
	•	Backend route should:
	1.	Gather all landlord houses.
	2.	Call same logic as house delete for each.
	3.	Delete landlord + profile rows last.





05/09/2025
===========

	1.	Current baseline

	•	Website rolled back to stable point after bulk editing pages were completed.
	•	All files confirmed working at this stage.
	•	DB intact at /static/uploads/houses/student_palace.db.

	2.	Files last edited in this thread (now rolled back)

	•	landlord/houses.py
	•	templates/house_form.html
	•	landlord/house_form.py
	•	landlord/house_repo.py
	•	landlord/rooms.py
	•	landlord/init.py

	3.	Main feature requests still pending

	•	House edit page should display “You have configured X rooms” underneath the basics section (Letting type / Bedrooms / Gender preference).
	•	Postcode verification still to be added on the house form (we parked this).
	•	Room table idea (showing list of rooms under house edit) is parked for later — currently only the simple count message is required.

	4.	Design rules to remember

	•	Additions should be minimal and scoped (avoid changing multiple files in one step).
	•	Show room count only on “Edit” house page, never on “New” house page.
	•	No complex imports to avoid circular dependencies.
	•	Always keep working backups before edits.

	5.	Future roadmap (based on discussions)

	•	Postcode verification on house form (address section).
	•	Add rules: bedrooms_total must be >= number of configured rooms.
	•	Optional: expand from room count to room table (with edit + delete only, no photos).
	•	Admin enhancements (backup/export confirmed working).
	•	Security: potential future work on landlord ID verification and 2FA.

	6.	Reminders

	•	Stable rollback point tag: “baseline-stable-2025-08-31”.
	•	Use incremental testing — deploy one small change at a time.
	•	If things break, roll back files touched since the last good deploy.

added:

Landlord-side

landlord/houses.py
Routes for listing, creating, editing, and deleting houses. Connects form input with DB via house_repo.

landlord/house_form.py
Helper for parsing/validating house form data. Provides defaults like landlord listing type.

landlord/house_repo.py
Repository layer with SQL for inserting/updating houses.

landlord/rooms.py
Routes for room-level CRUD (add, edit, delete rooms under a house).

landlord/init.py
Sets up the landlord blueprint and imports all landlord modules so their routes are registered.

templates/house_form.html
Jinja template for house create/edit. Full page with title, city, EPC, letting type, bedrooms, gender preference, address, bathrooms, amenities, description, media.

utils_summaries.py
Helper to recompute and update summary data for houses/rooms (keeps counts and availability consistent).

⸻

Admin-side

admin/dashboard.py
Routes for the admin dashboard page. Shows key counters and stats for landlords, houses, rooms, etc.

admin/admin.py
Contains the admin login/logout, backup download, and general admin routes.

templates/admin_home.html
Admin home/dashboard template. Contains buttons for logout, backup download, and navigation to dashboard.

templates/admin_dashboard.html
Template for the admin dashboard, showing counters and overview stats.











Student Palace – Handover Summary (as of 3rd Sept 2025)
=======================================================
	1.	Core architecture

	•	Flask app using Blueprints (public, landlord, admin).
	•	SQLite database located at /static/uploads/houses/student_palace.db.
	•	Database persists across deploys. Backups can be taken from /admin/backup.
	•	Static uploads (houses, rooms, EPCs, photos) stored under /static/uploads/.
	•	Admin and landlord authentication implemented. Admin session based on ADMIN_TOKEN environment variable.

	2.	Database schema (relevant tables)

Table: landlords
	•	id (int, primary key)
	•	email (str)
	•	password_hash (str)
	•	created_at (datetime)

Table: landlord_profiles
	•	landlord_id (int, fk → landlords.id)
	•	display_name (str)
	•	phone (str)
	•	website (str)
	•	bio (str)
	•	public_slug (str, optional for public page link)
	•	profile_views (int)
	•	is_verified (int, 0 or 1)

Table: houses
	•	id (int, primary key)
	•	landlord_id (fk → landlords.id)
	•	title (short title, max ~20 chars)
	•	description (text, up to 1200 chars)
	•	city (name, chosen from admin-maintained city list)
	•	address (string, normalised)
	•	bedrooms_total (int, required ≥ 1)
	•	letting_type (whole or share)
	•	gender_preference (Male, Female, Mixed, Either)
	•	bills_option (yes, no, some)
	•	bills_included (legacy int flag, kept in sync with bills_option)
	•	bills_util_* (five flags: gas, electric, water, broadband, tv)
	•	shared_bathrooms (int)
	•	washing_machine, tumble_dryer, dishwasher, cooker, microwave, coffee_maker, central_heating, air_con, vacuum, wifi, wired_internet, common_area_tv, cctv, video_door_entry, fob_entry, off_street_parking, local_parking, garden, roof_terrace, bike_storage, games_room, cinema_room (all booleans)
	•	cleaning_service (none, weekly, fortnightly, monthly)
	•	listing_type (owner or agent)
	•	epc_rating (optional A–G)
	•	youtube_url (normalised watch URL if supplied)
	•	created_at (datetime)

Table: rooms
	•	id (int, pk)
	•	house_id (fk → houses.id)
	•	name (room name, free text)
	•	description (text)
	•	ensuite (bool)
	•	bed_size (text, e.g. double)
	•	tv, desk_chair, wardrobe, chest_drawers, lockable_door, wired_internet, safe, dressing_table, mirror, bedside_table, blinds, curtains, sofa (all booleans)
	•	couples_ok, disabled_ok (booleans)
	•	room_size (numeric string, e.g. “25.5 sqm”)
	•	price_pcm (int)
	•	is_let (bool)
	•	available_from (date)
	•	let_until (date, optional – if present and in the past, auto-marks let)
	•	created_at (datetime)

Table: cities
	•	id (int)
	•	name (str, e.g. Leeds, Cardiff)
	•	is_active (bool)

Table: images
	•	id (int)
	•	house_id (nullable, fk)
	•	room_id (nullable, fk)
	•	filename (str)
	•	file_path (str)
	•	width, height, bytes (image metadata)
	•	is_primary (bool)
	•	created_at (datetime)

	3.	Summaries and availability roll-ups

	•	We created a utility: utils_summaries.py with recompute_house_summaries() and recompute_all_houses().
	•	On every room add/edit/delete, recompute_house_summaries() is called.
	•	On house create/edit, recompute_house_summaries() is called (initialises rooms_available=0).
	•	recompute_all_houses() can be run from admin/stats to recalc all houses if data drifts.

Logic for availability:
	•	Whole property letting: students search requires group_size == bedrooms_total and rooms_available == bedrooms_total.
	•	Room-only letting: students search requires rooms_available >= group_size.
	•	Academic year filter: 1 Aug to 31 Jul. Matching is based on available_from date. If available_from falls in a given year, property shows for that academic year.
	•	Let until date: if present and in the past, room is auto-marked let.
	•	Images limited: 5 per property and 5 per room. Extra uploads are trimmed with a warning.

	4.	Landlord flows

	•	Landlord can log in, view dashboard of houses, add/edit/delete houses.
	•	Each house has a rooms tab: list rooms, add new, edit or delete.
	•	House creation: requires title, description, city (from admin list), address, bedrooms_total, letting_type, gender_preference, bills info. Optional EPC and YouTube.
	•	Rooms creation: requires name, description, price, available_from. Optional ensuite flag and features. Each new room triggers summary recompute.
	•	If rooms created exceed bedrooms_total, system prevents further additions.
	•	Flash messages confirm success/errors.

	5.	Admin flows

	•	Admin login via token (ADMIN_TOKEN).
	•	Admin dashboard: totals for landlords, houses, rooms with last 24h deltas.
	•	Admin home page: has buttons for backup, cities, landlords, images, dashboard (stats).
	•	Admin can manage cities (add/activate/deactivate/delete).
	•	Admin can view landlords (list with verification, profile details, public slug, views). Each landlord detail shows profile edit, verification toggle, reset password, update email, danger zone delete.
	•	Admin can manage images: view all or broken only, delete broken, see metadata.
	•	Admin summaries page (new): shows each house, bedrooms_total, total rooms, rooms_available, and overall stats. Searchable by city/title/id. Supports recompute button to recalc all houses. Pagination included.

	6.	Public pages (currently placeholders but structured)

	•	Home (/) – shows hero search, list of active cities, featured property card.
	•	Search (/search) – captures query: city, group_size, gender, ensuite, bills_included. Currently echoes back values but will later integrate DB search logic.
	•	Public property detail pages and room detail pages already designed in mockups. Each will show images (max 5), badges, description, availability, request viewing button (no calendar integration yet).
	•	Cities list is controlled by admin only.

	7.	Business rules recap

	•	Cities are only added/removed/activated by admin.
	•	Rooms_available is always derived, never manually edited.
	•	EPC optional, stored as A–G or blank.
	•	YouTube normalisation ensures consistent embed links.
	•	All boolean flags stored as int (0/1).
	•	Cleaning service only accepts none, weekly, fortnightly, monthly.
	•	Images stored in DB plus on disk, with background process for cleanup. Orphaned images can be detected and deleted.

	8.	Admin templates recap

	•	Admin home: entry point after login, with navigation and quick stats.
	•	Admin dashboard: shows totals and 24h deltas.
	•	Admin summaries: new page for availability roll-ups.
	•	Admin cities: manage city list.
	•	Admin landlords: search, list, detail, edit profile, toggle verified.
	•	Admin images: browse all images, filter broken, delete.
	•	Admin backup: download DB snapshot.
	•	All admin pages extend base.html with Student Palace branding.

	9.	Current status

	•	Database is initialised, schema extended with description and youtube_url safely.
	•	Landlord and room flows working end-to-end with recompute summaries.
	•	Admin can now view cities, landlords, images, dashboard, and summaries.
	•	Public pages stubbed in, ready to be wired to DB.
	•	Backup strategy in place (manual trigger).
	•	Deployment stable after rollback of experimental changes.
	•	Error resolved: admin.dashboard endpoint confirmed working and linked from templates.
	•	Summaries button corrected to point to admin.admin_summaries.

	10.	Next steps (future work)

	•	Wire student search page to DB queries for houses/rooms, applying business rules.
	•	Build property detail and room detail public pages from DB.
	•	Style and limit image galleries (max 5).
	•	Add request viewing workflow for students.
	•	Add admin page to approve or moderate properties (if needed).
	•	Add landlord billing/verification integration (ID verification provider?).
	•	Continue to back up after each successful deployment.







Student Palace – Authoritative Handover (facts only)

1. Tech stack
	•	Flask app, Jinja2 templates.
	•	SQLite database (file lives at /static/uploads/houses/student_palace.db, persists across deploys).
	•	Gunicorn as server.
	•	Static assets under /static.
	•	Uploads stored under /static/uploads/....

2. Current modules & flows
	•	Public (public.py)
	•	/ (homepage) → loads active cities from DB, shows one featured property (stubbed).
	•	/search → echoes filters back to the template (no DB logic wired yet).
	•	Landlord area
	•	Signup/login working.
	•	Landlords can create/edit/delete houses.
	•	Landlords can add/edit/delete rooms inside their houses.
	•	When a landlord adds/edits/deletes houses or rooms, we recompute summaries (so room counts stay consistent).
	•	Admin area
	•	Login secured by ADMIN_TOKEN.
	•	Pages in place:
	•	Home (/admin/) → navigation hub.
	•	Dashboard (/admin/dashboard) → totals + 24h deltas for landlords/houses/rooms.
	•	Cities (/admin/cities) → add/activate/deactivate/delete cities.
	•	Landlords (/admin/landlords) → list/search landlords; detail page shows their profile and properties.
	•	Images (/admin/images) → paginated list of uploaded images, broken/valid, delete tools.
	•	Backup (/admin/backup) → download SQLite DB file.
	•	Summaries (/admin/summaries) → NEW page we added to view per-house rollups (bedrooms_total, rooms_total, rooms_available). Includes a “Recompute all summaries” button.

3. Database schema (confirmed tables/columns)
	•	cities → id, name, is_active.
	•	landlords → id, email, password_hash, created_at.
	•	landlord_profiles → landlord_id, display_name, phone, website, bio, public_slug, profile_views, is_verified, role.
	•	houses → id, landlord_id, title, description, city, address, letting_type, bedrooms_total, gender_preference, bills_option, bills_included, shared_bathrooms, cleaning_service, listing_type, epc_rating, youtube_url, created_at.
	•	Plus many boolean amenity fields (wifi, garden, etc.) that we confirmed working.
	•	rooms → id, house_id, name, description, ensuite, bed_size, features (booleans), couples_ok, disabled_ok, price_pcm, is_let, available_from, let_until, created_at.
	•	house_images → id, house_id, file_name, filename, file_path, width, height, bytes, is_primary, sort_order, created_at.

4. Summaries system (implemented facts)
	•	utils_summaries.recompute_house_summaries(conn, hid) runs after landlord edits houses/rooms.
	•	utils_summaries.recompute_all_houses(conn) recalculates for every house (admin trigger).
	•	Admin Summaries page shows:
	•	per-house: id, title, city, letting_type, bedrooms_total, rooms_total, rooms_available.
	•	global glance: houses_total, sum(bedrooms_total), rooms_total_all, rooms_available_all.
	•	Room cap rule enforced: landlord cannot add more rooms than bedrooms_total.

5. Images system
	•	House images: max 5 per property.
	•	Upload pipeline: resize to 1600px max, watermark “Student Palace”, save as JPG, record metadata in DB.
	•	Admin can browse images, filter “broken only”, and delete.

6. Validation & normalization (facts we coded in)
	•	Cities: landlords must pick from active cities list.
	•	Addresses: normalized into one-line, saved into houses.address.
	•	Bills: controlled by bills_option (yes/no/some).
	•	yes → all bills_util_* = 1, bills_included = 1
	•	no → all bills_util_* = 0, bills_included = 0
	•	some → checkboxes decide bills_util_*, bills_included = 0
	•	Gender preference: stored in houses.gender_preference (Male/Female/Mixed/Either).
	•	EPC rating: optional, must be A–G if set.
	•	Room availability: is_let and let_until decide availability; recomputed summaries reflect these.

7. What’s live today
	•	Landlord: can sign up, log in, add houses, add rooms, upload images.
	•	Admin: can log in, add cities, view landlords, manage images, backup DB, see dashboard, view summaries.
	•	Public: homepage loads with cities, search page echoes filters (not querying DB yet).

8. What’s not built yet
	•	Public search results logic (currently echo only).
	•	Public property/room detail pages.
	•	Viewing/enquiry workflow.
	•	Landlord public profile pages.
	•	Room images (only houses have images right now).






STUDENT PALACE – PROJECT SUMMARY (ROLLUP)

Core Context
	•	Platform: Flask + SQLite app.
	•	Purpose: Student Palace property management and search platform.
	•	Key actors: Admin, Landlords, Students.
	•	DB persists at /opt/render/project/src/static/uploads/houses/student_palace.db.
	•	Static uploads live under /static/uploads/houses (photos), plus /static/uploads/floorplans (floor plans).

Pages built so far
	•	Landlord signup/login.
	•	Landlord dashboard.
	•	Add/edit house form.
	•	Rooms tab (add/edit room).
	•	Landlord photos (house photos).
	•	Landlord floorplans.
	•	EPC upload.
	•	Landlord room photos (new, now working).
	•	Student homepage.
	•	Student property search results.
	•	Student property detail.
	•	Student room detail.
	•	Admin login.
	•	Admin dashboard.
	•	Admin cities management.
	•	Admin landlords list + landlord detail (fixed).
	•	Admin images overview.

Image handling helpers
	•	image_helpers.py (handles house images, watermarking, resizing, schema enforcement, CRUD on house_images table).
	•	image_helpers_floorplans.py (handles floor plan uploads, resizing, watermarking, CRUD on house_floorplans table).
	•	Room images are being added in parallel (image_helpers_rooms.py will mirror the same structure).

Rules for images
	•	Maximum 5 images per house, room, or floorplan.
	•	Allowed formats: JPEG, PNG, WebP, GIF.
	•	Max file size: 5 MB.
	•	Images resized to 1600px max side.
	•	Watermark “Student Palace” added bottom-right.
	•	Filenames stored without leading slash (relative to /static).
	•	DB rows store width, height, bytes, created_at, primary flag, sort_order.
	•	Primary image is auto-assigned if none exists.

Landlord rooms
	•	Room listing page shows all rooms for a house.
	•	New button added beside “Edit” and “Delete” = “Photos” linking to /landlord/houses//rooms//photos.
	•	Room photos now upload successfully and render correctly.

Admin landlord pages
	•	Admin landlords list (search, view list, Open button).
	•	Admin landlord detail page fixed (was broken because of incorrect url_for; now uses admin.admin_landlords and admin.admin_landlord_detail consistently).
	•	Admin landlord detail shows: account details, profile fields, verification, password reset, delete landlord.
	•	Properties list added at bottom of landlord detail page.
	•	Admin login page working.

Known issues addressed
	1.	Import errors in landlord/room_photos.py fixed (accept_upload_room was missing; we aligned with house photos pattern).
	2.	Admin landlord detail page fixed by correcting template references to url_for(“admin.admin_landlords”) instead of url_for(“admin_landlords”).
	3.	Missing “Photos” button on room list page was added so landlord can manage room photos.
	4.	Confirmed watermark pipeline works (both for houses and rooms).
	5.	Confirmed DB schema guards (house_images, house_floorplans) exist.

Security note (Critical)
	•	Problem: landlord-only routes were addressable by predictable IDs (e.g., /landlord/houses/123/edit). Without ownership checks, Landlord A could type Landlord B’s house ID and see/edit B’s data.
	•	This is an Insecure Direct Object Reference (IDOR). Serious risk for data leaks and unauthorized access.
	•	Fix: every landlord route must require login and enforce ownership checks:
• For houses: verify house_id belongs to current landlord.
• For rooms: verify room_id belongs to house_id AND house belongs to landlord.
	•	Abort with 403/404 if not owner.
	•	Apply checks consistently to view, edit, delete, upload photos, floorplans, EPC, etc.
	•	Extra hardening: rate-limit landlord endpoints, log denied attempts, prefer UUIDs for public URLs.

What to audit next
	•	Ensure ownership checks across ALL landlord routes.
	•	Confirm image_helpers_rooms.py exists and mirrors house/floorplans helpers.
	•	Confirm landlord templates consistently use the new room photos link.
	•	Ensure admin routes cannot be accessed by landlords.
	•	Ensure public pages (student search/property detail) do not leak unpublished or let properties.

Deployment checkpoints
	•	Baseline stable after admin counters added (2025-08-31).
	•	Images admin page live, working.
	•	Houses, rooms, and photos all saving correctly.
	•	Landlord and admin logins working correctly.
	•	Room photos confirmed working first try.
	•	Admin landlord detail fixed, now functional.

⸻

That’s the full package of everything we’ve covered: what works, what was fixed, what helpers exist, rules, security concerns, and what to check next.
